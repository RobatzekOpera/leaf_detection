//*************************************************************************
//  Library of Accappella methods for detecting leaf cells
//  //  
// By:
// Olavi Ollikainen - Olavi.Ollikainen@evotec-technologies.com
// Kurt Stuber - stueber@mpiz-koeln.mpg.de
// Sebastian Schaaf - schaaf@mpiz-koeln.mpg.de
// 
// In case of query contact silke.robatzek@tsl.ac.uk
// or dan.maclean@tsl.ac.uk

//*************************************************************************


//controller method that co-ordinates the detection of Leaf Cells. Calls many of the other procs above for function. Works by calculating a line through 
// the bright spots in the image (the cell borders) and uses the skeleton methods to smooth that line. Then uses erosion to fill line out to mask the
// cell border and detects objects as the inside of the thick eroded lines
 
proc LeafCellsDetection(
image image1 in "Input image with intensity information. Leaf cells are detected by this image",
bool showillustrations=yes in,
ObjectList LeafCells out "output list of leaf cells",
ObjectList BigLeafCells out "output list of big leaf cells",
objectlist Lines out "List of line structure",
)
{
	thresholdxx(4,image=Image1)
	mean(image=image1)
	mask(threshold,image=image)
	set(M_bg=mask)
	blank(image1.width, image1.height,1)
	
	set(image.type="mask")
	carrypixels(image=image,mask=M_bg.vector,data=0)
	set(M_bg2=image)
	
	blank(image1.width, image1.height,0)
	set(image.type="mask")
	set(IM_blank=image)
	set(image[1,1]=1, image[image1.width-2,1]=1, image[image1.width-2,image1.height-2]=1, image[1,image1.height-2]=1)
	
	mask2stencil(image)

	stencil2objects()
	calczone(50)
	zonemask(-50,oo)
	and(image=objects.zonemask.image,mask=M_bg2)
	setattr(M_bg3,image.vector)
	calcarea(M_bg3)
	objectfilter(M_bg3_area>800)
	set(ErosionDistance=sqrt(image.width*image.width+image.height*image.height))
	set(NUmberOfSteps=round(ErosionDistance/3)-1)
	calczone(ErosionDistance,stencil=M_bg2)
	zonemask(-ErosionDistance)
	CalcFillStencil_MPIZ(stencilname="zonemask")
	renameattr(zonemask=zonemask_filled)
	calcarea(zonemask)
	objectfilter(zonemask_area>10000)
	
	set(OL_erase=objects)
	Bright_mask(image1,27)
	mask2stencil(M_bright)//, Neighbourhood=25)
	if(stencil.itemcount>31999)
		ReduceStencilObjectsByAreaTo31999_MPIZ()
	end()
	stencil2objects()
	
	calcarea()
	set(ob1=objects)
	
	set(ob00=objects)

	FillSmallHoles()
	
	set(IM_start=objects.body.mask.image)
	maskthinning_temp(objects,image1)
	maskthinning_temp(objects,image1)
	maskthinning_temp(objects,image1)
	maskthinning_temp(objects,image1)
	renameattr(skeleton=body)
	CalcSkeletonByIntensity(stencil=skeleton, image=image1, IntensityEvaluationMode=2, IntensityEvalParam=-1)
	renameattr(skeleton=skeleton_skeleton)
	CalcSkeletonByIntensity(stencil=skeleton, image=image1, IntensityEvaluationMode=2, IntensityEvalParam=-2)
	renameattr(skeleton_skeleton_byIntensity=skeleton_skeleton)
	CalcSkeleton(stencil=skeleton_skeleton_byIntensity)
	renameattr(skeleton_skeleton=skeleton_skeleton_byIntensity_skeleton)
	set(obx=objects)
	mask2stencil(objects.skeleton_skeleton.mask, neighbourhood=8)
	stencil2objects()
	setattr(skeleton_skeleton,body)
	calczone(-40, stencil=obx.body)
	zonemask(-40,oo)
	calcarea()
	objectfilter(area>20)
	
	set(IM_skeleton=objects.skeleton_skeleton.mask.image)
	
	renameattr(sk=skeleton_skeleton)
	if(ShowIllustrations)
	end()
	div(result,image1, infinity=0, spreadfactor=1000, uncertainty=0, result_type="Unsigned,short")
	mask(0.1,image=result)
	set(M_10=mask)
	mask(result.median, image=result)
	and(image=M_10.image,mask=mask.image)
	and(image=objects.sk.image,mask=image)
	setattr(sk_thresholded,image.vector)
	set(ob2=objects)

	RemoveSkeletonLayer(skeletonName="sk")
	set(ob3=objects)
	RemoveSkeletonLayer(skeletonName="sk_LayerRemoved")
	set(ob4=objects)
	RemoveSkeletonLayer(skeletonName="sk_LayerRemoved_LayerRemoved")
	renameattr(sk_mod=sk_LayerRemoved_LayerRemoved_LayerRemoved)
	calcarea(sk_mod)
	calcintensity(sk_mod,image=result)
	set(ob5=objects)
	// The found skeleton is in the list ob5, stencil sk_mod
	// End of  Finds Skeleton
	
	
	// Cell detection, creates from skeleton cells borders
	stencil2objects(objects.sk_mod)
	FillSmallHoles()

	setattr(filled,objects.filled,objects=ob5)
	calcarea(filled)
	calcattr(RelativeHoleArea,(1.0*filled_area)/(1.0*sk_mod_area))
	objectfilter((sk_mod_area>100 or sk_mod_intensity>10) and sk_mod_area>30)
	objectfilter(RelativeHoleArea<0.04 or sk_mod_area>100)
	
	calcerosion(-3,stencil=sk)

	Calcskeleton(sk_mod)
	RemoveSkeletonLayer(skeletonName="sk_mod_skeleton")
	
	set(Lines=objects)
	if(ShowIllustrations)
	end()
	blank(image1.width,image1.height,1)
	set(IM_blank=image)
	set(IM_blank.type="mask")
	clearborders(IM_blank,4)

	not(image=stencil)
	clearborders(image,3)
	
	or(image=stencil,mask=Lines.sk_eroded.mask.image)
	set(M_border=image)
	not(image=image)
	clearborders(image,3)
	set(M_body=stencil)
	
	mask2stencil(M_body)
	stencil2objects()
	
	calcerosion(-5)
	stencil2objects(objects.eroded)
	calcarea()
	
	RemoveSmallObjects(minarea=650)
	
	FillSmallHoles(minimumholearea=400)
	if(lines.count==0)
		calcarea()
		objectfilter(area>image1.width*image1.height+10)
	else()
		if(lines.body.area>200)

			if(OL_erase.count>0)
				carrypixels(image=objects.body.image,mask=ol_erase.zonemask.mask,data=0)
				setattr(body,image.vector)
				setattr(index,image)
				calcborder()
				calcarea()
				objectfilter(area>1200)
				
				calcintensity(image=image1)
				and(image=objects.filled.image,mask=objects.body.mask.image)
				setattr(filled,image.vector)
			end()
		else()
			calcarea()
			
			objectfilter(area>image1.width*image1.height+10)
		end()
	end()
	set( keepobjects = objects)
	objectfilter(body.area<40000)
	objectfilter(body.area>800)
	set(LeafCells=objects)
	set( objects = keepobjects)
	objectfilter( body.area >=40000)
	set(BigLeafCells = objects)
}





// A method that is involved in the manipulation of the lines skeleton created by the LeafCellsDetection Module, helps 'shave' the line skeleton
proc CalcNodesLarge( string SkeletonName="skeleton" in "Stencil in input list,  Nodes are found for this stencil", 
objectlist objects inout "Input-output object list") "Adds to object list a stencil-type attribute LargeNodes"
{
	if(!defined("objects." & SkeletonName))
		error("Error. Input stencil " & SkeletonName & " is not defined. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
	else()
		eval("set(IfIntervalVector=Objects." & SkeletonName & ".class==\"intervalvector\")")
		if(!IfIntervalVector)
			error("Error. The attribute  " & SkeletonName & " given by the input SkeletonName is not a stencil. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
		end()
	end()
	set(ob_in=objects)
	eval("setattr(stencil_temp,objects." & SkeletonName & ")")

	set(IM_skeleton=objects.stencil_temp.mask.image)
	
	blank(3,3,1)
	set(kernel0=image)
	set(kernel0[0,0]=0, kernel0[2,2]=0,  kernel0[0,2]=0, kernel0[2,0]=0)

	set(kernel1=kernel0)
	set(kernel1[1,0]=0)
	convolution(image=IM_skeleton,mask=objects.stencil_temp.mask, faster=yes, convolutionkernel=kernel1.vector)
	set(image.factor=1)
	mask(4,image=image)
	set(M_nodeslarge1=mask.image)
	
	set(kernel2=kernel0)
	set(kernel2[2,1]=0)
	convolution(image=IM_skeleton,mask=objects.stencil_temp.mask, faster=yes, convolutionkernel=kernel2.vector)
	set(image.factor=1)
	mask(4,image=image)
	set(M_nodeslarge2=mask.vector)
	
	set(kernel3=kernel0)
	set(kernel3[1,2]=0)
	convolution(image=IM_skeleton,mask=objects.stencil_temp.mask, faster=yes, convolutionkernel=kernel3.vector)
	set(image.factor=1)
	mask(4,image=image)
	set(M_nodeslarge3=mask.vector)
	
	set(kernel4=kernel0)
	set(kernel4[0,1]=0)
	convolution(image=IM_skeleton,mask=objects.stencil_temp.mask, faster=yes, convolutionkernel=kernel4.vector)
	set(image.factor=1)
	mask(4,image=image)
	set(M_nodeslarge4=mask.vector)
	
	carrypixels(image=M_nodeslarge1,mask=M_nodeslarge2,data=1)
	carrypixels(image=image,mask=M_nodeslarge3,data=1)
	carrypixels(image=image,mask=M_nodeslarge4,data=1)
	
	calcnodes(stencil_temp)
	carrypixels(image=image,mask=objects.stencil_temp_nodes,data=1)
	and(image=objects.stencil_temp.image, mask=image)
	eval("setattr(" & SkeletonName & "_LargeNodes,image.vector, objects=ob_in)")
}

// A method that is involved in the manipulation of the lines skeleton created by the LeafCellsDetection Module, helps 'shave' the line skeleton by identifying pixels that make up branches from the main line
proc CalcSkeletonBranches(
string SkeletonName="skeleton" in "Stencil-type attribute on which the  skeleton branches are found.",
string DeadEndStencil="deadend" in "Stencil-type attribute, which corresponds to DeadEnd tips",
objectlist objects inout "Input-output object list with the stencil-type attribute on which the branches are found. Input list must include also a stencil, which coresponds to dead end tips.",
objectlist Branches out "Output object list of Branch lines on the skeleton between nodes.  " 
) "Finds skeleton branches between nodes. Outputs object list of skeleton branches"
{
	set(ob_in=objects)
	if(!defined("objects." & SkeletonName))
		error("Error. Input stencil " & SkeletonName & " is not defined. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
	else()
		eval("set(IfIntervalVector=Objects." & SkeletonName & ".class==\"intervalvector\")")
		if(!IfIntervalVector)
			error("Error. The attribute  " & SkeletonName & " given by the input SkeletonName is not a stencil. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
		end()
	end()

	if(!defined("objects." & DeadEndStencil))
		error("Error. Input stencil " & DeadEndStencil & " is not defined. Input DeadEndStencil should correspond to the existing stencil-type attribute in the input object list.")
	else()
		eval("set(IfIntervalVector=Objects." & DeadEndStencil & ".class==\"intervalvector\")")
		if(!IfIntervalVector)
			error("Error. The attribute  " & DeadEndStencil & " given by the input DeadEndStencil is not a stencil. Input DeadEndStencil should correspond to the existing stencil-type attribute in the input object list.")
		end()
	end()

	eval("setattr(skeleton,ob_in." & SkeletonName & ")")
	eval("setattr(DeadEnd,ob_in." & DeadEndStencil & ")")

	calcnodeslarge(SkeletonName="skeleton")
	
	convolutionmask("disk",1)
	convolution(image=objects.skeleton_largenodes.mask.image, mask=objects.skeleton.mask,faster=yes)
	set(image.factor=1)
	mask(1)
	set(nodes_surrounding=mask)
	set(ob2=objects)
	carrypixels(image=objects.skeleton.mask.image,mask=nodes_surrounding.vector,data=0)
	set(M_connections=image)
	
	mask2stencil(M_connections, Neighbourhood=8)
	stencil2objects()
	
	and(image=objects.body.image, mask=ob2.deadend.mask.image)
	setattr(deadend, image.vector)
	calcarea()
	calcarea(deadend)
	carrypixels(image=ob2.skeleton.image, mask=ob2.skeleton_largenodes, data=0)
	calczone(1, stencil=image.vector)
	zonemask(-1,oo)
	renameattr(Branches=zonemask)
	calcarea(Branches)
	Set(Branches=objects)
	and(image=ob2.skeleton.image,mask=Branches.body.mask.image)
	Setattr(Branches,image.vector,objects=ob_in)
	Setattr(Nodes,ob2.skeleton_LargeNodes)
	Setattr(DeadEnd,ob2.skeleton_DeadEnd)
	Setattr(DeadEnd_type1,ob2.skeleton_DeadEnd_type1)
	Setattr(DeadEnd_type2,ob2.skeleton_DeadEnd_type2)
}

// A method that is involved in the manipulation of the lines skeleton created by the LeafCellsDetection Module, helps 'shave' the line skeleton by finding ends
proc CalcDeadEndTypes(
string SkeletonName="skeleton" in "Stencil-type attribute, which corresponds to skeleton",
objectlist objects inout "Input-output object list"
) "Finds the deadend tips in the skeleton"
{
	set(ob_in=objects)
	if(!defined("objects." & SkeletonName))
		error("Error. Input stencil " & SkeletonName & " is not defined. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
	else()
		eval("set(IfIntervalVector=Objects." & SkeletonName & ".class==\"intervalvector\")")
		if(!IfIntervalVector)
			error("Error. The attribute  " & SkeletonName & " given by the input SkeletonName is not a stencil. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
		end()
	end()
	eval("setattr(skeleton,ob_in." & SkeletonName & ")")

	set(IM_skeleton=objects.skeleton.mask.image)
	not(image=IM_skeleton)
	set(IM_skeleton_not=image)

	CalcNodesLarge(SkeletonName="skeleton")
	
	convolutionmask("ribbon",1, 1)
	set(ConvolutionKernel_4n=ConvolutionKernel)
	convolution(image=objects.skeleton_largenodes.mask.image,mask=objects.skeleton, faster=yes)
	set(image.factor=1)
	mask(1,image=image)
	set(M_nodes_4n=mask.vector)
	
	convolutionmask("ribbon",1.5, 1)
	set(ConvolutionKernel_8n=ConvolutionKernel)
	
	convolution(image=IM_skeleton,mask=objects.skeleton, faster=yes)
	set(image.factor=1)
	set(IM_convolution_8n=image)
	mask(1,image=image)
	
	set(M1=mask.image)
	mask(2,image=image)
	set(M2=mask.image)
	
	carrypixels(image=m1,mask=M2.vector,data=0)
	set(M_deadend0=image.vector)

	convolution(image=objects.skeleton_largenodes.mask.image,mask=M_deadend0, faster=yes)
	set(image.factor=1)
	mask(1,image=image)
	set(M_deadend_type1=image.vector)

	blank(3,3,1)
	set(IM1=image)
	
	carrypixels(image=M_nodes_4n.image, mask=M_deadend0,data=0)
	set(M_nodes_4n_mod=image.vector)
	
	set(kernel1=IM1)
	set(kernel1[2,0]=0,kernel1[2,1]=0, kernel1[2,2]=0, kernel1[1,1]=0)
	convolution(image=IM_skeleton_not,mask=M_nodes_4n_mod, faster=yes, convolutionkernel=kernel1.vector)
	set(image.factor=1)
	mask(5,image=image)
	set(M_deadend1=mask.image)
	
	set(kernel2=IM1)
	set(kernel2[0,0]=0,kernel2[0,1]=0, kernel2[0,2]=0, kernel2[1,1]=0)
	convolution(image=IM_skeleton_not,mask=M_nodes_4n_mod, faster=yes, convolutionkernel=kernel2.vector)
	set(image.factor=1)
	mask(5,image=image)
	set(M_deadend2=mask.image)
	
	set(kernel3=IM1)
	set(kernel3[0,0]=0,kernel3[1,0]=0, kernel3[2,0]=0, kernel3[1,1]=0)
	convolution(image=IM_skeleton_not,mask=M_nodes_4n_mod, faster=yes, convolutionkernel=kernel3.vector)
	set(image.factor=1)
	mask(5,image=image)
	set(M_deadend3=mask.image)
	
	set(kernel4=IM1)
	set(kernel4[0,2]=0,kernel4[1,2]=0, kernel4[2,2]=0, kernel4[1,1]=0)
	convolution(image=IM_skeleton_not,mask=M_nodes_4n_mod, faster=yes, convolutionkernel=kernel4.vector)
	set(image.factor=1)
	mask(5,image=image)
	set(M_deadend4=mask.image)
	
	or(image=M_deadend1,mask=M_deadend2)
	or(image=image,mask=M_deadend3)
	or(image=image ,mask=M_deadend4)
	or(image=image,mask=M_deadend_type1.image)
	set(M_deadend_type1=image)
	carrypixels(image=M_deadend0.image, mask=M_deadend1.vector, data=0)
	set(M_deadend_type2=image)
	or(image=M_deadend_type1.image, mask=M_deadend_type2.image)
	set(M_deadend=image)
	set(ob2=objects)

	eval("setattr(" & SkeletonName & "_LargeNodes,ob2.skeleton_LargeNodes, objects=ob_in)")

	and(image=ob2.skeleton.image, mask=M_deadend.image)
	eval("setattr(" & SkeletonName & "_DeadEnd,image.vector)")
	
	and(image=ob2.skeleton.image, mask=M_deadend_type1.image)
	eval("setattr(" & SkeletonName & "_DeadEnd_type1,image.vector)")
	
	and(image=ob2.skeleton.image, mask=M_deadend_type2.image)
	eval("setattr(" & SkeletonName & "_DeadEnd_type2,image.vector)")
}

// A method that is involved in the manipulation of the lines skeleton created in the LeafCellsDetection Module, removes the line DeadEnd branches
proc RemoveSkeletonLayer(
string SkeletonName="skeleton" in "Stencil-type attribute, which corresponds to skeleton",
int MinimumArea=10 in "DeadEnd skeleton branches with area less than the limit are discarded",
objectlist objects inout "Input-output object list"
) "Discards from skeleton the DeadEnd branches with area less than the limit MinimumArea"
{
	set(ob_in=objects)
	if(!defined("objects." & SkeletonName))
		error("Error. Input stencil " & SkeletonName & " is not defined. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
	else()
		eval("set(IfIntervalVector=Objects." & SkeletonName & ".class==\"intervalvector\")")
		if(!IfIntervalVector)
			error("Error. The attribute  " & SkeletonName & " given by the input SkeletonName is not a stencil. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
		end()
	end()
	eval("setattr(skeleton,ob_in." & SkeletonName & ")")

	CalcDeadEndTypes(SkeletonName="skeleton")
	carrypixels(image=objects.skeleton.image,mask=objects.skeleton_DeadEnd_type1.mask,data=0)
	setattr(skeleton_mod,image.vector)
	set(ob2=objects)
	CalcSkeletonBranches(SkeletonName="skeleton_mod", deadendstencil="skeleton_DeadEnd_type2")
	ObjectFilter(MinimumArea>Branches_area and deadend_area>0, objects=Branches)
	carrypixels(image=ob2.skeleton_mod.image,mask=objects.Branches.mask,data=0)
	set(BranchesRemoved=objects)
	setattr(skeleton_LayerRemoved,image.vector, objects=ob2)
	and(image=ob_in.body.image, mask=BranchesRemoved.Branches.mask.image)
	setattr(skeleton_RemovedBranches,image.vector)
	set(ob3=objects)
	
	eval("setattr(" & SkeletonName & "_LargeNodes,ob3.skeleton_LargeNodes, objects=ob_in)")
	eval("setattr(" & SkeletonName & "_DeadEnd, ob3.skeleton_DeadEnd)")
	eval("setattr(" & SkeletonName & "_DeadEnd_type1, ob3.skeleton_DeadEnd_type1)")
	eval("setattr(" & SkeletonName & "_DeadEnd_type2, ob3.skeleton_DeadEnd_type2)")
	eval("setattr(" & SkeletonName & "_LayerRemoved,  ob3.skeleton_LayerRemoved)")
	eval("setattr(" & SkeletonName & "_RemovedBranches,  ob3.skeleton_RemovedBranches)")
}

// A method that is involved in the manipulation of the lines skeleton created by the LeafCellsDetection Module, finds the branches on the skeleton
proc SkeletonBranchesNodes(
string SkeletonName="skeleton" in "Stencil-type attribute, which corresponds to skeleton",
objectlist objects inout "Input-output object list",
objectlist Branches out "Output object list of skeleton branches",
objectlist Nodes out "Output object list of nodes"

) "Finds Brances and Nodes of skeleton. Outputs object lists of the found Branches and Nodes. In addition adds to the input list attributes branches and nodes."
{
	set(ob_in=objects)
	if(!defined("objects." & SkeletonName))
		error("Error. Input stencil " & SkeletonName & " is not defined. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
	else()
		eval("set(IfIntervalVector=Objects." & SkeletonName & ".class==\"intervalvector\")")
		if(!IfIntervalVector)
			error("Error. The attribute  " & SkeletonName & " given by the input SkeletonName is not a stencil. Input SkeletonName should correspond to the existing stencil-type attribute in the input object list.")
		end()
	end()
	eval("setattr(skeleton,ob_in." & SkeletonName & ")")

	CalcDeadEndTypes(SkeletonName="skeleton")
	carrypixels(image=objects.skeleton.image,mask=objects.skeleton_DeadEnd_type1.mask,data=0)
	setattr(skeleton_mod,image.vector)
	

	set(ob2=objects)
	CalcSkeletonBranches(SkeletonName="skeleton_mod", deadendstencil="skeleton_DeadEnd_type2")
	set(ob2=objects)
	mask2stencil(objects.nodes)
	stencil2objects()
	set(Nodes=objects)
	eval("setattr(" & SkeletonName & "_Nodes,ob2.Nodes, objects=ob_in)")
	eval("setattr(" & SkeletonName & "_Branches,ob2.Branches)")
	eval("setattr(" & SkeletonName & "_DeadEnd,ob2.DeadEnd)")
	eval("setattr(" & SkeletonName & "_DeadEnd_type1,ob2.DeadEnd_type1)")
	eval("setattr(" & SkeletonName & "_DeadEnd_type2,ob2.DeadEnd_type2)")
}


//Closes the objects by filling small holes
proc FillSmallHoles(
int minimumholearea=20 in "Minimum area for holes. Holes with area less than the limit are filled",
objectlist objects inout "Input-output object list. Attributes in the input list are lost."
) "Fills small holes in objects. Holes with area less than the limit MinimumHoleArea are filled."
{
	set(ob_in=objects)
	fillobjects()
	set(ob01=objects)
	carrypixels(image=ob01.body.image,mask=ob_in.body.mask,data=0)
	stencil2mask(image.vector)
	mask2stencil()
	stencil2objects()
	calcarea()
	objectfilter(minimumholearea<=area)
	
	carrypixels(image=ob01.body.image,mask=objects.body.mask,data=0)
	stencil2objects(image.vector)
	xor(image=objects.body.image,mask=ob_in.body.mask.image)
	setattr(filled, image.vector)
} 

//Finds image sub-regions, ie enclosed objects
proc ImageSubRegions(
int ImageWidth in,
int ImageHeight in,
int NumberOfLinearDivision in,
objectList objects out
)
{
	set(w0=int((1.0*ImageWidth)/(2.0*NumberOfLinearDivision)))
	set(h0=int((1.0*ImageHeight)/(2.0*NumberOfLinearDivision)))
	set(w1=2*w0, h1=2*h0)
	blank(ImageWidth, ImageHeight)
	set(image.type="mask")

	foreach(0..NumberOfLinearDivision-1	)
		foreach(0..NumberOfLinearDivision-1,"j")
			set(image[w0+i*w1, h0+j*h1]=1)
		end()
	end()
	mask2stencil(image)
	stencil2objects()
	set(eros_dist=w0+h0)
	calcerosion(-eros_dist)
} 

//Data transformation method, turns datacube for intenstity to image 
proc DataCubeProjectionCorrection(
int FirstZPlane in,
int LastZPlane in,
datacube datacube inout,
image IM_planeNumber out,
image PlaneNUmberImage out
) [hidden]
{
	////// Projects maximum intensity for each x-y position from datacube to image
	Maximums3D(0,image=datacube)
	StencilFrom3DTo2D(stencil=maximums,datacube=datacube) //Projects the found maximums from 3-dim to plane
	set(IM_plane=PlaneNumberImage)
	//delete(datacube) 
	convolutionmask("ribbon",7.9,7)

	convolution(image=valueimage)
	minus(valueimage,image,neg_method="zero", result_type="unsigned,short")
	set(r4=result)
	mask(1, image=result,userealvalues=no)
	set(M_bright2=mask)

	mask(result.mean, image=r4)

	and(image=M_bright2.image, mask=mask.image)
	set(M_bright3=image)

	mask2stencil(M_bright3)
	if(stencil.itemcount>31999)
		ReduceStencilObjectsByAreaTo_MPIZ()
	end()
	stencil2objects()

	CalcSkeletonByIntensity(image=r4)
	CalcSkeletonByIntensity(skeleton, image=r4, IntensityEvalParam=-10)
	CalcSkeletonByIntensity(skeleton_skeleton, image=r4, IntensityEvaluationMode=2, IntensityEvalParam=-4)
	CalcSkeletonByIntensity(skeleton_skeleton_skeleton, image=r4, IntensityEvaluationMode=2, IntensityEvalParam=-20)
	CalcSkeleton(skeleton_skeleton_skeleton_skeleton)
	RenameAttr(Skeleton=skeleton_skeleton_skeleton_skeleton)
	CalcArea(Skeleton)
	set(Skeleton=objects)
	ObjectFilter(Skeleton_area>10)
	SkeletonBranchesNodes(skeletonName="skeleton")

	Set(OL4=objects)
	set(objects=branches)
	ObjectFilter(area>10)
	Set(OL7=objects)

	ImageSubRegions(r4.width, r4.height,4)

	And(Image=objects.eroded.image, mask=OL7.body.mask.image)
	clearborders(image,9)
	SetAttr(skeleton, stencil.vector)
	CalcStat("quantile",0.7, stencil=skeleton, image=r4)
	ThreshMask(stencil=skeleton,threshold=quantile,image=r4)
	CalcStat("median",stencil=threshmask, image=PlaneNumberImage)
	CarryObjects(image=objects.eroded.image, stencil=objects.eroded, data=objects.median)

	redimension(image.width + 2, image.height + 2, 1, 1) 
	stencil2objects(image)
	calcerosion(-2)

	set(temp=objects.eroded.image)
	crop(1,1,temp.width-1, temp.height-1,image=temp)
	mean(31,image=image)
	set(IM_PlaneNumber=Image)

	delete(objects)
	set(objects=OL7)
	calcIntensity(body,image=r4)
	calcstat("max",stencil=body,image=r4)
	calcstat("Quantile",0.5,stencil=body,image=r4)

	Threshmask(threshold=quantile,stencil=body,image=r4)
	Calcintensity(Threshmask,image=r4)

	Calcstat("median",stencil=body,attrname="planeNumberMean", image=PlaneNumberImage)
	Calcerosion(-3)

	CarryObjects(image=objects.eroded.image, stencil=objects.eroded, data=objects.max)
	set(IM_intensity=Image)
	maximums(20, mask=M_bright3.vector,image=r4)
	set(max1=maximums)
	maximums(70, mask=M_bright3.vector,image=r4)
	set(max2=maximums)
	or(image=max1.mask.image,mask=max2.mask.image)
	and(image=objects.eroded.image,mask=image)
	setattr(max1,image.vector)
	calcarea(max1)

	objectfilter(max1_area>0)
	Calcerosion(-100,eroded,numberofsteps=20)
	CarryObjects(image=objects.eroded.image, stencil=objects.eroded_eroded, data=objects.planeNumberMean)
	set(IM_intensity2=Image)
	//CarryObjects(image=objects.eroded.image, stencil=objects.eroded_eroded, data=objects.max)
	//set(IM_max=Image)
	//CarryObjects(image=objects.eroded_eroded.image, stencil=objects.eroded_eroded, data=objects.planeNumberMean)
	//set(IM_planeNumberMean=Image)
	set(OL5=objects)


	and(image=objects.body.image,mask=max2.mask.image)
	setattr(max2,image.vector)
	calcarea(max2)
	objectfilter(max2_area>0)
	calcerosion(-10,max2,restrictivestencil=M_bright3,numberofsteps=2)
	and(image=objects.max2_eroded.image,mask=skeleton.skeleton.mask.image)
	setattr(skeleton1,image.vector)
	Calcintensity(skeleton1,image=PlaneNumberImage)
	CalcAttr(planenumber,round(skeleton1_intensity))
	calcerosion(-100,max2_eroded,restrictivestencil=M_bright3,numberofsteps=20)
	calcerosion(-200,max2_eroded_eroded,numberofsteps=20)



	set(i=FirstZplane, i2=0)
	foreach(FirstZplane..LastZplane)
		set(threshold2=i2+1)
		minus(threshold2,IM_planeNumber,neg_method="abs",result_type="unsigned,short")
		mask(threshold=8,image=result)
		carrypixels(image=DataCube[i2],mask=mask.vector,data=0)
		set(DataCube[i2]=image)
		set(i2=i2+1)
	end()

}

//puts a maximum on the number of objects that may be detected to fit in with available data structures.
proc ReduceStencilObjectsByAreaTo31999_MPIZ(
stencil stencil inout "Input-output stencil, which object number will be reduced to fit the limit 31999. Only the first 31999 objects are taken into account and the others are discarded."
) [hidden]

{
	set(alimit=32000)
	set(alimit2=alimit-1)
	eval("WarningFilter(disable=\"[Mask2Stencil]\")")
	Removes_OnePixel_Objects(stencil.vector.MASK)
	mask2stencil()
	if(stencil.itemcount<alimit)
		return()
	end()
	
	set(mask_in=mask)
	set(temp=stencil.vector.mask.image)
	blank(temp.width, temp.height)
	convelems(image, "integer", 2,"unsigned")
	
	append(bvector,1..alimit2)
	set(avector=bvector)
	set(stencil_in=stencil)
	while(stencil.itemcount>alimit2)
		set(stencil2=stencil)
		create("vector","unsigned,int", stencil.itemcount-alimit2,0)
		append(avector,vector)
		carryobjects(image=result,stencil=stencil,data=avector)
		set(image.type="stencil")
		set(stencil=image.vector)
		stencil2objects()
		calcarea()
		if(defined("v_area"))
			append(v_area,objects.area)
		else()
			set(v_area=objects.area)
		end()
		push(v_objects,objects)
		carrypixels(image=stencil2.image,mask=objects.body.mask, data=0)
		mask2stencil(image.vector.mask)
		
	end()
	stencil2objects()
	calcarea()

	append(v_area,objects.area)
	sort(v_area,yes)
	set(minarea=result[alimit2]+1)
	objectfilter(area<minarea)
	carrypixels(image=mask_in,mask=objects.body,data=0)
	foreach(v_objects)
		set(objects=i)
		objectfilter(area<minarea)
		carrypixels(image=image,mask=objects.body,data=0)
	end()
	mask2stencil(image)
	if(stencil.itemcount>31999)
		ReduceStencilObjectsTo31999_tech()
	end()	
}

proc CreateDataCubeWithControl( 
table sourcedata inout,
int FirstZPlane in, 
int LastZPlane in,
int MinStdDev in,
DataCube DataCube out,
int newFirstZplane out,
int newLastZplane out
)
{
	set( Zplane = FirstZplane )
	////// Creates a datacube
	set(CubeDepth=LastZplane-FirstZplane+1)
	create("datacube",sourcedata.SourceImage[0].width,sourcedata.sourceImage[0].height,CubeDepth, "unsigned short")
	set(FirstZplane_in=FirstZplane, LastZplane_in=LastZplane)
	set(i=FirstZplane, i2=0)
	// find new FirstZplane and LastZplane discarding featureless images:
	set( is_empty="true")
	set( newFirstZplane = FirstZplane)
	foreach(FirstZplane..LastZplane)
		if( sourcedata.sourceImage[i-1].stddev < MinStdDev )
			if( is_empty == "true")
				set( newFirstZplane = i )
			end()
		else()
			set( is_empty= "false" )
		end()
	end()
	set( is_empty="true")
	set( i=LastZplane)
	set( newLastZplane = LastZplane)
	foreach(LastZplane..FirstZplane)
		if( sourcedata.sourceImage[i-1].stddev < MinStdDev )
			if( is_empty == "true")
				set( newLastZplane = i )
			end()
		else()
			set( is_empty= "false" )
		end()
	end()
	set( FirstZplane = newFirstZplane)
	set( LastZplane = newLastZplane)
	
	if( LastZplane <FirstZplane )
		set(LastZPlane=FirstZPlane)
		return()
	end()

	set(i=FirstZplane, i2=0)
	foreach(FirstZplane..LastZplane)
		set(datacube[i2]=sourcedata.sourceImage[i-1])
		set(i2=i2+1)
	end()
	foreach(FirstZplane_in..LastZplane_in)
		delete(sourcedata.sourceImage[i-1])
	end()
}




// removes objects from list

proc DetectType2Objects(
	image image1 in "Input image with intensity information",
	objectlist Lines in "Input list of line structure",
	objectlist LeafCells inout "Input-output list of cells. In output list regions, which belong to type2 objects are erased.",
	bool showillustrations=yes in,
	objectlist ObjectsType2 out "List of detected type objects"
)
{
	//////////////////////////////////////////////////// Finds Type2 objects
	
	stencil2objects(Lines.sk_mod)
	
	FillSmallHoles(minimumholearea=1000)
	calcarea()
	calcarea(filled)
	mask2stencil(objects.filled.mask)
	stencil2objects()
	calcarea()
	objectfilter(area>150)
	calcerosion(-1)
	
	and(image=objects.eroded.image, mask=lines.sk_mod.mask.image)
	setattr(border_corrected,image.vector)
	calcintensity(border_corrected,image=image1)
	
	objectfilter(border_corrected_intensity>1000)

	Dark_Mask(image1, 7)
	CalcErosion(-1)
	Stencil2Objects(Objects.eroded)
	Calcintensity(image=result)
	renameattr(DarkSig=intensity)
	Calcintensity(image=image1)
	CalcAttr(RelDarkSig,(1.0*DarkSig)/(intensity))
	
	CalcIntensity(border,image=image1)
	Calczone(-3,zonetype="equidistant")
	zonemask(-3,3)
	renameattr(BorderRegion=zonemask)
	Zonemask(3,oo)
	Renameattr(InnerRegion=Zonemask)
	Calcintensity(InnerRegion,image=image1)
	
	Calcintensity(BorderRegion,image=image1)
	CalcAttr(Inner2BorderRatio, InnerRegion_intensity/Border_intensity)
	CalcAttr(Border2BorderRatio, BorderRegion_intensity/Border_intensity)
	Zonemask(4, 5)
	Renameattr(Region4=Zonemask)
	CalcIntensity(Region4, image=image1)
	Mean(5,image=image1)
	
	CalcStat("Min",AttrName="MinIntensity", stencil=InnerRegion,image=image)

	CalcAttr(MinToRegion4Ratio, (1.0*MinIntensity)/Region4_intensity)
	CalcAttr(MinToBorderRatio, (1.0*MinIntensity)/Border_intensity)
	CalcAttr(DarkToRegion4, (1.0*DarkSig)/Region4_intensity)
	CalcArea()

	deleteattr(zone,outerzone)
	set(ObjectsType2=objects)

	
	///// End of finds Type2 objects
	
	///// Removes from list of cells Type2 objects
	carrypixels(image=LeafCells.body.image,mask=ObjectsType2.body, data=0)

	stencil2objects(image.vector)
	set(LeafCells=objects)
} 
// Fills in stencil objects
proc CalcFillStencil_MPIZ(
	string StencilName="body" noquote in "Name of the stencil type attribute in the input object list, which will be filled. Only short attribute names are supported: StencilName=body is correct whereas centers=Objects.Body is erroneous. The attribute name can be given with and without the quotation marks, i.e. both are correct: StencilName=body and StencilName=\"body\".",
	objectlist objects inout "Input-output object list. The output list includes a new stencil type attribute, which corresponds to the created objects. A number of objects is equal to a number of the initial centers. In case of body stencil (StencilName=\"body\") the added attribute has the name \"Filled\" otherwise \"StencilName_Filled\". For example, if StencilName=\"BrightMask\" the attribute name is \"BrightMask_Filled.\"." 
) object list attribute creation "Fills the gaps (holes) in the geometrical regions given by a stencil type attribute. The output object list includes a new stencil, which corresponds to the \"filled regions\". See also the module FillObjects(), which performs exactly the same operation. The difference is that CalcFillStencil_MPIZ() can be applied to all stencil type attributes while FillObjects() only to the body one."
{
	set(objects_in=objects)
	eval("set(Stencil=objects." & StencilName & ")")
	if(errorcode==0)
		if(Stencil.class!="intervalvector")
			error("Input StencilName does not correspond to the stencil-type attribute. The input StencilName must specify the stencil type attribute in the input object list, which defines the centers positions. Only short attribute names are supported: centers=body is correct whereras centers=Nuclei.Body is erroneous. The attribute name can be given with and without the quatation marks, both are correct: centers=body and centers=\"body\". It is assumed that the centers approximately correspond to the local intensity maximums (maximum regions) or to minimums (minimum regions).")
		end()
	else()
		FindShortAttrNameFromLongName(StencilName)
		eval("set(Stencil=objects." & ShortAttrName & ")")
		if(errorcode==0)
			if(Stencil.class=="intervalvector")
					error("Input StencilName does not correspond to the attribute in the input object list. Probably, a long attribute name was used instead of a short one. Only short attribute names are supported: StencilName=body is correct whereras StencilName=Objects.Body is erroneous. The attribute name can be given with and without the quatation marks, both are correct: StencilName=body and StencilName=\"body\". It is assumed that the centers approximately correspond to the local intensity maximums (maximum regions) or to minimums (minimum regions).")
			end()
		end()
		error("The input StencilName does not correspond to the existing stencil type attribute in the input object list. The input StencilName must specify the stencil type attribute in the input object list.. Only short attribute names are supported: StencilName=body is correct whereras StencilName=Objects.Body is erroneous. The attribute name can be given with and without the quatation marks, both are correct: StencilName=body and StencilName=\"body\".")
	end()
	
	stencil2objects(stencil)
	Fillobjects()
	if(objects.count!=objects_in.count)
		set(st_temp=objects.body)
		FillStencilfromCenter_tech(objects_in.body,objects.body)
		stencil2objects(stencil)
	end()
	set(ob2=objects)
	if(StencilName=="body")
		setattr(Filled,ob2.body,objects=objects_in)
		setattr(Filled_border,ob2.border)
	else()
		set(temp="" & StencilName & "_Filled,ob2.body,objects=objects_in)")
		eval("setattr(" & temp )
		set(temp="" & StencilName & "_Filled_border,ob2.border)")
		eval("setattr(" & temp )
	end()
}


// Counts fields and controls if all images are present
proc ControlImageFieldsStackAC2(Table sourcedata in, int NumberOfChannels in, int ZplanesInStack in, int StackNo in, int StackCount out, int StartStack out, int EndStack out, int ImagesINOneStack out, int InvalidStacks out)
{
	set(ImagesINOneStack=NumberOfChannels*ZplanesInStack)    //calculates number of images per stack
	if(ImagesINOneStack<1)
		error("Number of channels or number of images in stack is not a positive number. Please select a number larger than 0.")
	end()

	set (ImageCount = sourcedata.rowcount)		// determine the number of images present
	

	if ((ImageCount ~ ImagesINOneStack) != 0)
		error("Number of images ("&ImageCount&") is not a multiple of the number of images per stack ("&ImagesINOneStack&").")
	end()

	set (StackCount = int(ImageCount / ImagesINOneStack))

	if (StackCount == 0)
		error("No sufficient number of images found in the data file. Only "&StackCount&" images found, but "&ImagesINOneStack&" needed for a stack.")
	end()

	if (StackNo == 0)   // all images present are analysed
		set (StartStack = 1)
		set (EndStack = StackCount)
	else()
		if (StackNo > StackCount)       /// Error message if too high Image Field number was chosen
			error("Please select a smaller field number. There are only "&StackCount&" stacks in the file, but you selected to analyse stack "&StackNo&". ")
		end()
		if (StackNo < 0)   ////Error message if negative Image Field number was chosen
			error("Please select a positive stack number.")
		end()
		set (StartStack = StackNo)
		set (EndStack = StackNo)
		set (StackCount=1)
	end()
	set(InvalidStacks=0)   //variable for counting of invalid black image fields
}

//Assigns image names for the current field
proc Assign_FirstLastZplane(Table sourcedata in, int _StackCounter in, int ImagesINOneStack in, int NumberOfChannels in, int FirstZplane out , int LastZplane out)
{
	set(FirstZplane=(_StackCounter-1)*ImagesINOneStack+1)
	set(LastZplane=(_StackCounter)*ImagesINOneStack-NumberOfChannels+1)
}

